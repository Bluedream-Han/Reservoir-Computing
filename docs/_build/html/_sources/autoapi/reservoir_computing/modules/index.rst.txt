:py:mod:`reservoir_computing.modules`
=====================================

.. py:module:: reservoir_computing.modules


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   reservoir_computing.modules.RC_model
   reservoir_computing.modules.RC_forecaster




.. py:class:: RC_model(reservoir=None, n_internal_units=100, spectral_radius=0.99, leak=None, connectivity=0.3, input_scaling=0.2, noise_level=0.0, n_drop=0, bidir=False, circle=False, dimred_method=None, n_dim=None, mts_rep='mean', w_ridge_embedding=1.0, readout_type='lin', w_ridge=1.0, mlp_layout=None, num_epochs=None, w_l2=None, nonlinearity=None, svm_gamma=1.0, svm_C=1.0)


   Bases: :py:obj:`object`

   Build and evaluate a RC-based model for time series classification or clustering.

   The training and test Multivariate Time Series (MTS) are multidimensional arrays of shape ``[N,T,V]``, where ``N`` is the number of samples, ``T`` is the number of time steps in each sample, ``V`` is the number of variables in each sample.

   Training and test labels have shape ``[N,C]``, with ``C`` being the number of classes.

   The dataset consists of training data and respective labels ``(X, Y)`` and test data and respective labels ``(Xte, Yte)``.

   **Reservoir parameters:**

   :param reservoir: object of class ``Reservoir`` (default ``None``)
       Precomputed reservoir. If ``None``, the following structural hyperparameters must be specified.
   :param n_internal_units: int (default ``100``)
       Processing units in the reservoir.
   :param spectral_radius: float (default ``0.99``)
       Largest eigenvalue of the reservoir matrix of connection weights.
   :param leak: float (default ``None``)
       Amount of leakage in the reservoir state update.
       If ``None`` or ``1.0``, no leakage is used.
   :param connectivity: float (default ``0.3``)
       Percentage of nonzero connection weights.
       Unused in circle reservoir.
   :param input_scaling: float (default ``0.2``)
       Scaling of the input connection weights.
   :param noise_level: float (default ``0.0``)
       Standard deviation of the Gaussian noise injected in the state update.
   :param n_drop: int (default ``0``)
       Number of transient states to drop.
   :param bidir: bool (default ``False``)
       Use a bidirectional reservoir (``True``) or a standard one (``False``).
   :param circle: bool (default ``False``)
       Generate determinisitc reservoir with circle topology.

   **Dimensionality reduction parameters:**

   :param dimred_method: str (default ``None``)
       Procedure for reducing the number of features in the sequence of reservoir states.
       Possible options are: ``None`` (no dimensionality reduction), ``'pca'``, or ``'tenpca'`` (TensorPCA).
   :param n_dim: int (default ``None``)
       Number of resulting dimensions after the dimensionality reduction procedure.

   **Representation parameters:**

   :param mts_rep: str (default ``None``)
       Type of MTS representation.
       It can be ``'last'`` (last state), ``'mean'`` (mean of the states),
       ``'output'`` (output model space), or ``'reservoir'`` (reservoir model space).
   :param w_ridge_embedding: float (default ``1.0``)
       Regularization parameter of the ridge regression in the output model space
       and reservoir model space representation; ignored if ``mts_rep == None``.

   **Readout parameters:**

   :param readout_type: str (default ``'lin'``)
       Type of readout used for classification. It can be ``'lin'`` (ridge regression), ``'mlp'`` (multiplayer perceptron), ``'svm'`` (support vector machine), or ``None``. If ``None``, the input representations will be saved instead: this is useful for clustering and visualization.
   :param w_ridge: float (default ``1.0``)
       Regularization parameter of the ridge regression readout (only for ``readout_type=='lin'``).
   :param mlp_layout: tuple (default ``None``)
       Tuple with the sizes of MLP layers, e.g., ``(20, 10)`` defines a MLP with 2 layers of 20 and 10 units respectively (only for ``readout_type=='mlp'``).
   :param num_epochs: int (default ``None``)
       Number of iterations during the optimization (only for ``readout_type=='mlp'``).
   :param w_l2: float (default ``None``)
       Weight of the L2 regularization (only for ``readout_type=='mlp'``).
   :param nonlinearity: str (default ``None``)
       Type of activation function ``{'relu', 'tanh', 'logistic', 'identity'}`` (only for ``readout_type=='mlp'``).
   :param svm_gamma: float (default ``1.0``)
       Bandwidth of the RBF kernel (only for ``readout_type=='svm'``).
   :param svm_C: float (default ``1.0``)
       Regularization for SVM hyperplane (only for ``readout_type=='svm'``).

   .. py:method:: fit(X, Y=None, verbose=True)

      Train the RC model.

      Parameters:
      -----------
      X : np.ndarray
          Array of of shape ``[N, T, V]`` representin the training data.

      Y : np.ndarray
          Array of shape ``[N, C]`` representing the target values.

      verbose : bool
          If ``True``, print the training time.

      Returns:
      --------
      None


   .. py:method:: predict(Xte)

      Computes predictions for out-of-sample (test) data.

      Parameters:
      -----------
      Xte : np.ndarray
          Array of shape ``[N, T, V]`` representing the test data.

      Returns:
      --------
      pred_class : np.ndarray
          Array of shape ``[N]`` representing the predicted classes.



.. py:class:: RC_forecaster(reservoir=None, n_internal_units=100, spectral_radius=0.99, leak=None, connectivity=0.3, input_scaling=0.2, noise_level=0.0, n_drop=0, circle=False, dimred_method=None, n_dim=None, w_ridge=1.0)


   Bases: :py:obj:`object`

   Class to perform time series forecasting with RC.

   The training and test data are multidimensional arrays of shape ``[T,V]``, with

   - ``T`` = number of time steps in each sample,
   - ``V`` = number of variables in each sample.

   Given a time series ``X``, the training data are supposed to be as follows:

       ``Xtr, Ytr = X[0:-forecast_horizon,:], X[forecast_horizon:,:]``

   Once trained, the model can be used to compute prediction ``forecast_horizon`` steps ahead:

           ``Yhat[t,:] = Xte[t+forecast_horizon,:]``

   **Reservoir parameters:**

   :param reservoir: object of class ``Reservoir`` (default ``None``)
       Precomputed reservoir. If ``None``, the following structural hyperparameters must be specified.
   :param n_internal_units: int (default ``100``)
       Processing units in the reservoir.
   :param spectral_radius: float (default ``0.99``)
       Largest eigenvalue of the reservoir matrix of connection weights.
   :param leak: float (default ``None``)
       Amount of leakage in the reservoir state update.
   :param connectivity: float (default ``0.3``)
       Percentage of nonzero connection weights.
   :param input_scaling: float (default ``0.2``)
       Scaling of the input connection weights.
   :param noise_level: float (default ``0.0``)
       Standard deviation of the Gaussian noise injected in the state update.
   :param n_drop: int (default ``0``)
       Number of transient states to drop.
   :param circle: bool (default ``False``)
       Generate determinisitc reservoir with circle topology.

   **Dimensionality reduction parameters:**

   :param dimred_method: str (default ``None``)
       Procedure for reducing the number of features in the sequence of reservoir states.
       Possible options are: ``None`` (no dimensionality reduction), ``'pca'``, or ``'tenpca'`` (TensorPCA).
   :param n_dim: int (default ``None``)
       Number of resulting dimensions after the dimensionality reduction procedure.

   **Readout parameters:**

   :param w_ridge: float (default ``1.0``)
       Regularization parameter of the ridge regression readout.

   .. py:method:: fit(X, Y, verbose=True)

      Train the RC model for forecasting.

      Parameters:
      -----------
      X : np.ndarray
          Array of shape ``[T, V]`` representing the training data.

      Y : np.ndarray
          Array of shape ``[T, V]`` representing the target values.

      verbose : bool
          If ``True``, print the training time.

      Returns:
      --------
      None


   .. py:method:: predict(Xte)

      Computes predictions for out-of-sample (test) data.

      Parameters:
      -----------
      Xte : np.ndarray
          Array of shape ``[T, V]`` representing the test data.

      Returns:
      --------
      Yhat : np.ndarray
          Array of shape ``[T, V]`` representing the predicted values.



